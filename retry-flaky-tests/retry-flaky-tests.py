from bs4 import BeautifulSoup
import re
import argparse
import requests

# Default values of the arguments:
# --testPlan: FullFunctionalTestPlan
# --parallel: 2
# Mandatory:
# --url: URL of the test report generated by xchtmlreport
parser = argparse.ArgumentParser(description="Generate re-run xcodebuild command for failed tests")
parser.add_argument("--testPlan", help="Test plan (Smoketest or FullFunctionalTests)", 
                    default="FullFunctionalTestPlan")
parser.add_argument("--parallel", help="Number of parallel simulators", default="2")
parser.add_argument("--iterations", help="Number of repetitions", default="2")
parser.add_argument("--url", required=True, help="URL of the test report") 
args = parser.parse_args()

# Download the file first
try:
    response = requests.get(args.url)
    response.raise_for_status()
except Exception as e:
    print(f"Error fetching URL: {e}")
    exit(1)

report_doc = BeautifulSoup(response.content, "html.parser")

# Get values for the destination
device_name = "iPhone 16"
device_os = "latest"
try:
    device_name = report_doc.find("h3", class_="device-name").get_text(strip=True)
    device_os = report_doc.find("li", class_="device-os").get_text(strip=True)
    device_os = re.sub(r"iOS ", "", device_os)
except AttributeError:
    print("Warning: Could not find device name or OS in the report. Using defaults.")

# Construct the first part of the command
test_plan = args.testPlan 
num_parallel = args.parallel
num_iterations = args.iterations
cmd = ("xcodebuild test-without-building -target Client -scheme Fennec \\\n"
       " -destination 'platform=iOS Simulator,name={0},OS={1}' \\\n"
       " -testPlan {2} -parallel-testing-enabled YES \\\n"
       " -parallel-testing-worker-count {3} -test-iterations {4}").format(
           device_name, device_os, test_plan, num_parallel, num_iterations)

# Construct individual "-only-testing" argument
failed_groups = report_doc.find_all("div", class_="test-summary-group failed")

print("# Failed Tests")

for group in failed_groups:
    group_name = group.find("p").get_text(strip=True) 
    group_name = re.sub(r"\s*\(\d+(\.\d+)?s\)", "", group_name)

    failed_divs = group.find_all("div", class_="test-summary failed")
    for div in failed_divs:
        test_name = div.find("p").get_text(strip=True)
        test_name = re.sub(r"\s*\(.*", "", test_name)
        cmd += " \\\n -only-testing:XCUITests/{0}/{1}".format(group_name, test_name)
        print("{0}/{1}".format(group_name, test_name))

print("\n# xcodebuild command for re-run")
print(cmd)
